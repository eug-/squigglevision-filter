package com.rf.anim {    import flash.events.TimerEvent;	import flash.utils.Dictionary; 	import flash.utils.Timer;	import com.rf.anim.SquigglevisionFilter;	/**	 * A wrapper around the SquigglevisionFilter that abstracts the	 * squigglevision animation.	 */	public class Squigglevision extends Object {		private var delay:int = 42;		private var filter:SquigglevisionFilter = new SquigglevisionFilter();		private var targets:Dictionary = new Dictionary();		private var timer:Timer = new Timer(delay);		private var seed:int = 0;		private var step:int = 3;		public function Squigglevision(rate:Number=24):void {			framerate = rate;			timer.addEventListener(TimerEvent.TIMER, timerHandler);			timer.stop();		}		public function set framerate(rate:Number) {			timer.delay = int(1000 / rate);		}				public function addStaticTarget(target:*):void {			target.filters = [filter];		}		public function addStaticTargets(targetArray:Array):void {			for (var i:int=0; i < targetArray.length; i++) {				addStaticTarget(targetArray[i]);			}		}		public function addTarget(target:*):void {			targets[target] = true;		}		public function addTargets(targetArray:Array):void {			for (var i:int=0; i < targetArray.length; i++) {				addTarget(targetArray[i]);			}		}		public function removeTarget(target:*):void {			target.filters = [];			delete targets[target];		}		public function start():void {			timer.start();		}		public function stop():void {			timer.stop();		}		function timerHandler(e:TimerEvent):void {			filter.animationIndex = seed;   			seed = ((seed + step) % int(filter.animationIndexMax)) + int(filter.animationIndexMin);			for (var shape:* in targets) {				shape.filters = [filter];			}		}	}}